// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TimeBlockColor {
  BLUE
  GREEN
  RED
  YELLOW
  PURPLE
  PINK
  ORANGE
  GRAY
}

model User {
  id           String @id @default(uuid()) @db.Uuid
  email        String @unique @db.Citext
  firstName    String @db.Citext @map("first_name")
  surname      String @db.Citext
  passwordHash String @map("password_hash")

  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("update_at")

  sessions Tokens[]
  dashboards Dashboards[]

  @@index([email])
  @@map("users")
}

model Tokens {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshToken String   @unique @map("refresh_token") @db.Text

  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("update_at")

  @@map("tokens")
}

model Dashboards {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title  String
  description String?

  isArchived Boolean  @default(false) @map("is_archived")

  timeBlocks TimeBlock[]

  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("update_at")

  @@unique([userId, title])
  @@map("dashboards")
}

model TimeBlock {
  id     String @id @default(uuid()) @db.Uuid
  title   String
  description String?
  order   Int
  color   TimeBlockColor @default(RED)

  dashboardId String @map("dashboard_id") @db.Uuid
  dashboard   Dashboards @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  cards       Card[]

  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("update_at")

  @@map("time-blocks")
}

model Card {
  id     String @id @default(uuid()) @db.Uuid
  title       String
  description String?
  dueDate     DateTime? @map("due_date") @db.Date
  order       Int
  isCompleted Boolean  @default(false) @map("is_completed")

  timeBlockId     String  @map("time-block_id") @db.Uuid
  timeBlock       TimeBlock     @relation(fields: [timeBlockId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("update_at")

  @@map("cards")
}